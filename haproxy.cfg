global
# Default SSL material locations
ca-base /certs
crt-base /certs

# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POL>
ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
log     global
mode    http
option  httplog
option  dontlognull
timeout connect 5000
timeout client  50000
timeout server  50000

frontend stats
       mode http
       bind *:8404
       stats enable
       stats uri /stats
       stats refresh 10s


# Load Balancing for Apache Cluster
frontend nextcloud
       bind *:80
       bind *:443 ssl crt /certs/
       optionforwardfor
       acl url_discovery path /.well-known/caldav /.well-known/carddav
       http-request redirect location /remote.php/dav/ code 301 if url_discovery
       acl maxscale hdr_sub(host) -i address.cloud
       acl collabora hdr_sub(host) -i address.cloud
       acl whiteboard hdr_sub(host) -i address.cloud

       use_backend nextcloud if maxscale
       use_backend coolwsd if collabora
       use_backend whiteboard if whiteboard


# HSTS
http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"


# SSL
acl letsencrypt-acl path_beg /.well-known/acme-challenge/
use_backend letsencrypt-backend if letsencrypt-acl


backend letsencrypt-backend
server certbot 127.0.0.1:8899

resolvers docker
nameserver dns1 127.0.0.11:53

# Load Balancing for Nextcloud
backend nextcloud
       balance roundrobin
       option http-keep-alive
       http-request add-header X-Forwarded-Proto https if { ssl_fc }
       option forwardfor
       cookie SRVNAME insert indirect preserve nocache httponly secure
       timeout connect  30000
       timeout client  30000
       timeout server 30000
       server app-next01 IP:8081 cookie next01 check
       server app-next02 IP:8082 cookie next02 check
       server app-next03 IP:8083 cookie next03 check
       server app-next04 IP:8084 cookie next04 check

# Load Balancing Whiteboard
backend whiteboard
       mode http
       balance roundrobin
       cookie WBC insert indirect nocache
       option httpchk
       option redispatch
       retries 3
       timeout connect 5s
       timeout server 30s
       timeout check 5s

       server whiteboard-node1 IP:5000 check cookie WB1
       server whiteboard-node2 IP:5001 check cookie WB2
       server whiteboard-node3 IP:5002 check cookie WB3

# Load Balancing for CODE Cluster
backend coolwsd
        mode http
        bind *:9980
        balance leastconn
        timeout tunnel 3600s
        hash-type consistent
        # Utiliser WOPISrc ou doc_id pour les sessions persistantes
        stick-table type string len 50 size 1m expire 30m
        stick on url_param(WOPISrc) if { url_param(WOPISrc) -m found }
        stick on url_param(doc_id) if { url_param(doc_id) -m found }

        # Liste des serveurs backend
        server coolwsd01 IP:9001 check
        server coolwsd02 IP:9002 check
        server coolwsd03 IP:9003 check

# Load Balancing for Galera Cluster
listen galera
       bind IP:3306
       option mysql-check user haproxy
       mode tcp
       option tcpka
       balance leastconn
       server mariadb-node1 IP:8001 check inter 5000 fastinter 2000 rise 2 fall 2
       server mariadb-node2 IP:8002 check inter 5000 fastinter 2000 rise 2 fall 2
       server mariadb-node3 IP:8003 check inter 5000 fastinter 2000 rise 2 fall 2
       server mariadb-node4 IP:8004 check inter 5000 fastinter 2000 rise 2 fall 2
       server mariadb-node5 IP:8005 check inter 5000 fastinter 2000 rise 2 fall 2

# Load Balancing for Redis Cluster
backend redis
       balance leastconn
       mode tcp
       option tcp-smart-accept
       option tcp-smart-connect
       option tcpka
       option tcplog
       option tcp-check
       tcp-check connect
       tcp-check send AUTH\ pass\r\n
       tcp-check send PING\r\n
       tcp-check expect string +PONG
       tcp-check send info\ replication\r\n
       tcp-check expect string role:master
       tcp-check send QUIT\r\n
       tcp-check expect string +OK
       server redis-node1 IP:7001 check inter 1s
       server redis-node2 IP:7002 check inter 1s
       server redis-node3 IP:7003 check inter 1s
       server redis-node4 IP:7004 check inter 1s
       server redis-node5 IP:7005 check inter 1s
       server redis-node6 IP:7006 check inter 1s

# Load Balancing for MinIO
listen minio
       bind IP:9000
       mode tcp
       balance leastconn
       server storage-node1 IP:9091 check inter 2s
       server storage-node2 IP:9092 check inter 2s
       server storage-node3 IP:9093 check inter 2s
       server storage-node4 IP:9094 check inter 2s

listen minio-replica
       bind IP:9000
       mode tcp
       server storage-replica-node1 IP:9091 check inter 2s
       server storage-replica-node2 IP:9092 check inter 2s
       server storage-replica-node3 IP:9093 check inter 2s
       server storage-replica-node4 IP:9094 check inter 2s
